@Slf4j
@Service
public class TestCacheService {

  @Cacheable(cacheNames = "users", key = "#id", unless = "#result == null", sync = true)
  public String getUserById(String id) {
    log.info("Loading user {}...", id);
    return "User-" + id;
  }
}

@ConfigurationProperties(prefix = "app.cache")
record CacheProps(
    List<String> names,
    long ttlMinutes,
    String clearCron,
    String clearZone
) {}

private final AtomicLong nanos = new AtomicLong();
    @Override public long read() { return nanos.get(); }
    public void advanceMinutes(long minutes) {
      nanos.addAndGet(Duration.ofMinutes(minutes).toNanos());
    }

public abstract class AbstractTTLAndAllCleanCacheTest {

  protected final CacheManager cacheManager;
  @Setter
  protected com.example.scheduler.CacheEvictScheduler cacheEvictScheduler;

  protected AbstractTTLAndAllCleanCacheTest(CacheManager cacheManager) {
    this.cacheManager = cacheManager;
  }

  protected abstract void advanceTime(long minutes);
  protected abstract long getConfiguredTTLMinutes();
}
