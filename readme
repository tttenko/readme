@Slf4j
@Service
public class TestCacheService {

  @Cacheable(cacheNames = "users", key = "#id", unless = "#result == null", sync = true)
  public String getUserById(String id) {
    log.info("Loading user {}...", id);
    return "User-" + id;
  }
}

@ConfigurationProperties(prefix = "app.cache")
record CacheProps(
    List<String> names,
    long ttlMinutes,
    String clearCron,
    String clearZone
) {}

private final AtomicLong nanos = new AtomicLong();
    @Override public long read() { return nanos.get(); }
    public void advanceMinutes(long minutes) {
      nanos.addAndGet(Duration.ofMinutes(minutes).toNanos());
    }

public abstract class AbstractTTLAndAllCleanCacheTest {

  protected final CacheManager cacheManager;
  @Setter
  protected com.example.scheduler.CacheEvictScheduler cacheEvictScheduler;

  protected AbstractTTLAndAllCleanCacheTest(CacheManager cacheManager) {
    this.cacheManager = cacheManager;
  }

  protected abstract void advanceTime(long minutes);
  protected abstract long getConfiguredTTLMinutes();
}

@Autowired
  private CacheEvictScheduler scheduler;
  @Autowired
  private CacheManager cacheManager;

  public CaffeineCacheIntegrationTest(@Autowired CacheManager cacheManager) {
    super(cacheManager);
  }

  @Override
  protected void advanceTime(long minutes) {
    ticker.advanceMinutes(minutes);
    cacheManager.getCacheNames().forEach(n ->
        ((org.springframework.cache.caffeine.CaffeineCache) cacheManager.getCache(n))
            .getNativeCache().cleanUp());
  }

  @Override
  protected long getConfiguredTTLMinutes() {
    return 5;
  }

  @Test
  void shouldExpireAfterConfiguredTTL() {
    Cache cache = cacheManager.getCache("users");
    cache.put("42", "test-user");

    assertThat(cache.get("42").get()).isEqualTo("test-user");
    advanceTime(getConfiguredTTLMinutes() - 1);
    assertThat(cache.get("42").get()).isEqualTo("test-user");
    advanceTime(2);
    assertThat(cache.get("42")).isNull();
  }

  @Test
  void shouldClearAllCachesCompletely() {
    Cache cache = cacheManager.getCache("users");
    cache.put("1", "first");
    assertThat(cache.get("1").get()).isEqualTo("first");

    scheduler.clearAllCachesNow();
    assertThat(cache.get("1")).isNull();
  }

@Bean
  public CacheProps cacheProps() {
    return new CacheProps(List.of("users"), 5, "0 0 3 * * *", "Europe/Moscow");
  }
